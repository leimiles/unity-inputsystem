//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/SwipeControls2.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SwipeControls2: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SwipeControls2()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SwipeControls2"",
    ""maps"": [
        {
            ""name"": ""SwipeMap"",
            ""id"": ""faf1286d-1130-4ea8-8f23-16d590699b18"",
            ""actions"": [
                {
                    ""name"": ""SwipeActions"",
                    ""type"": ""Value"",
                    ""id"": ""d27a5241-0639-4d57-81cb-1df2078848e5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""MouseAndPen"",
                    ""id"": ""60bd716a-64bf-4675-b380-c16d5bf58a7b"",
                    ""path"": ""PointerInput"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwipeActions"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""contact"",
                    ""id"": ""e76758b1-4318-4a02-ae83-3d21c41a2c4c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""SwipeActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""contact"",
                    ""id"": ""6012aab6-3bff-445b-9183-3f8257feec3a"",
                    ""path"": ""<Pen>/tip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pen"",
                    ""action"": ""SwipeActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""position"",
                    ""id"": ""06dfaf7b-6a30-460f-8547-060c048fa6f8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""SwipeActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""position"",
                    ""id"": ""293c4d11-ddc2-48cd-8ab7-af5b1cd90db5"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pen"",
                    ""action"": ""SwipeActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""tilt"",
                    ""id"": ""b74e05ec-3524-4cbf-b07e-495a9d09594c"",
                    ""path"": ""<Pen>/tilt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pen"",
                    ""action"": ""SwipeActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""pressure"",
                    ""id"": ""1ad2c534-ca2a-4dcd-8854-8e39c687bad6"",
                    ""path"": ""<Pen>/pressure"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pen"",
                    ""action"": ""SwipeActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""twist"",
                    ""id"": ""9cfd6f6f-97b3-4fba-a484-adffaa830393"",
                    ""path"": ""<Pen>/twist"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Pen"",
                    ""action"": ""SwipeActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Touch0"",
                    ""id"": ""c5420674-1302-48ad-ac10-599831103496"",
                    ""path"": ""PointerInput"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwipeActions"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""contact"",
                    ""id"": ""614d4764-97c2-408e-b6e8-1bab9a94cadf"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""SwipeActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""position"",
                    ""id"": ""7c4459f9-b9e9-4b00-a75f-40caf8631812"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""SwipeActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""radius"",
                    ""id"": ""f86f72ff-f56e-47cc-991e-ee8e2570a19e"",
                    ""path"": ""<Touchscreen>/touch0/radius"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""SwipeActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""pressure"",
                    ""id"": ""e4ba9e7b-cb5a-4115-8387-1c8e83ef832f"",
                    ""path"": ""<Touchscreen>/touch0/pressure"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""SwipeActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""inputId"",
                    ""id"": ""98a9f0b1-cf70-4955-9947-7031ab7d64f3"",
                    ""path"": ""<Touchscreen>/touch0/touchId"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""SwipeActions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": []
        },
        {
            ""name"": ""Pen"",
            ""bindingGroup"": ""Pen"",
            ""devices"": []
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": []
        }
    ]
}");
        // SwipeMap
        m_SwipeMap = asset.FindActionMap("SwipeMap", throwIfNotFound: true);
        m_SwipeMap_SwipeActions = m_SwipeMap.FindAction("SwipeActions", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SwipeMap
    private readonly InputActionMap m_SwipeMap;
    private List<ISwipeMapActions> m_SwipeMapActionsCallbackInterfaces = new List<ISwipeMapActions>();
    private readonly InputAction m_SwipeMap_SwipeActions;
    public struct SwipeMapActions
    {
        private @SwipeControls2 m_Wrapper;
        public SwipeMapActions(@SwipeControls2 wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwipeActions => m_Wrapper.m_SwipeMap_SwipeActions;
        public InputActionMap Get() { return m_Wrapper.m_SwipeMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwipeMapActions set) { return set.Get(); }
        public void AddCallbacks(ISwipeMapActions instance)
        {
            if (instance == null || m_Wrapper.m_SwipeMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwipeMapActionsCallbackInterfaces.Add(instance);
            @SwipeActions.started += instance.OnSwipeActions;
            @SwipeActions.performed += instance.OnSwipeActions;
            @SwipeActions.canceled += instance.OnSwipeActions;
        }

        private void UnregisterCallbacks(ISwipeMapActions instance)
        {
            @SwipeActions.started -= instance.OnSwipeActions;
            @SwipeActions.performed -= instance.OnSwipeActions;
            @SwipeActions.canceled -= instance.OnSwipeActions;
        }

        public void RemoveCallbacks(ISwipeMapActions instance)
        {
            if (m_Wrapper.m_SwipeMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwipeMapActions instance)
        {
            foreach (var item in m_Wrapper.m_SwipeMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwipeMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwipeMapActions @SwipeMap => new SwipeMapActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    private int m_PenSchemeIndex = -1;
    public InputControlScheme PenScheme
    {
        get
        {
            if (m_PenSchemeIndex == -1) m_PenSchemeIndex = asset.FindControlSchemeIndex("Pen");
            return asset.controlSchemes[m_PenSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    public interface ISwipeMapActions
    {
        void OnSwipeActions(InputAction.CallbackContext context);
    }
}
