//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MySamples/MoveToTouch/InputSystem/MoveToTouch.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MoveToTouch: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MoveToTouch()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MoveToTouch"",
    ""maps"": [
        {
            ""name"": ""Miles"",
            ""id"": ""de880cb9-d58c-4d73-a975-a57c3a05182b"",
            ""actions"": [
                {
                    ""name"": ""MoveTo"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a34818ab-2ba9-43a9-bd9c-bfedc7e541f2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""847b13bb-273d-4d03-a554-7d1f23bb9d1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9b675530-75a5-4b61-b988-2964d7f8c9ec"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""MoveTo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b59bc5c0-4f25-4cfe-b72f-fded946dc5be"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": []
        }
    ]
}");
        // Miles
        m_Miles = asset.FindActionMap("Miles", throwIfNotFound: true);
        m_Miles_MoveTo = m_Miles.FindAction("MoveTo", throwIfNotFound: true);
        m_Miles_Fire = m_Miles.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Miles
    private readonly InputActionMap m_Miles;
    private List<IMilesActions> m_MilesActionsCallbackInterfaces = new List<IMilesActions>();
    private readonly InputAction m_Miles_MoveTo;
    private readonly InputAction m_Miles_Fire;
    public struct MilesActions
    {
        private @MoveToTouch m_Wrapper;
        public MilesActions(@MoveToTouch wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveTo => m_Wrapper.m_Miles_MoveTo;
        public InputAction @Fire => m_Wrapper.m_Miles_Fire;
        public InputActionMap Get() { return m_Wrapper.m_Miles; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MilesActions set) { return set.Get(); }
        public void AddCallbacks(IMilesActions instance)
        {
            if (instance == null || m_Wrapper.m_MilesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MilesActionsCallbackInterfaces.Add(instance);
            @MoveTo.started += instance.OnMoveTo;
            @MoveTo.performed += instance.OnMoveTo;
            @MoveTo.canceled += instance.OnMoveTo;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(IMilesActions instance)
        {
            @MoveTo.started -= instance.OnMoveTo;
            @MoveTo.performed -= instance.OnMoveTo;
            @MoveTo.canceled -= instance.OnMoveTo;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(IMilesActions instance)
        {
            if (m_Wrapper.m_MilesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMilesActions instance)
        {
            foreach (var item in m_Wrapper.m_MilesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MilesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MilesActions @Miles => new MilesActions(this);
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    public interface IMilesActions
    {
        void OnMoveTo(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
}
