//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MySamples/RotateAround/InputSystem/RotateAround.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RotateAround: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RotateAround()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RotateAround"",
    ""maps"": [
        {
            ""name"": ""Rotate"",
            ""id"": ""13611451-b5e1-425f-8262-8cd61f7d88a5"",
            ""actions"": [
                {
                    ""name"": ""Finger0"",
                    ""type"": ""Value"",
                    ""id"": ""c1d7617b-c99e-45de-9365-f2ab387dc9af"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Finger1"",
                    ""type"": ""Value"",
                    ""id"": ""e57a51aa-b5a4-4d65-a634-737fec6b8f42"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1stTouch"",
                    ""id"": ""04dc191d-d897-4d54-aa23-e980d63b0011"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Finger0"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""a35045c8-68ba-4a6d-b5e8-8b1e1bd7dcf6"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Finger0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""69582bf4-2d07-4f0b-8ed6-71bc197ef9dc"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Finger0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2ndTouch"",
                    ""id"": ""4010ae62-6465-44f4-bca9-28272f028b79"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Finger1"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""c7d4c11a-d39f-43cc-9472-de4b6a9909aa"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Finger1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""bef53671-abf7-4edf-8c5c-96427a714919"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Finger1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": []
        }
    ]
}");
        // Rotate
        m_Rotate = asset.FindActionMap("Rotate", throwIfNotFound: true);
        m_Rotate_Finger0 = m_Rotate.FindAction("Finger0", throwIfNotFound: true);
        m_Rotate_Finger1 = m_Rotate.FindAction("Finger1", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Rotate
    private readonly InputActionMap m_Rotate;
    private List<IRotateActions> m_RotateActionsCallbackInterfaces = new List<IRotateActions>();
    private readonly InputAction m_Rotate_Finger0;
    private readonly InputAction m_Rotate_Finger1;
    public struct RotateActions
    {
        private @RotateAround m_Wrapper;
        public RotateActions(@RotateAround wrapper) { m_Wrapper = wrapper; }
        public InputAction @Finger0 => m_Wrapper.m_Rotate_Finger0;
        public InputAction @Finger1 => m_Wrapper.m_Rotate_Finger1;
        public InputActionMap Get() { return m_Wrapper.m_Rotate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotateActions set) { return set.Get(); }
        public void AddCallbacks(IRotateActions instance)
        {
            if (instance == null || m_Wrapper.m_RotateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotateActionsCallbackInterfaces.Add(instance);
            @Finger0.started += instance.OnFinger0;
            @Finger0.performed += instance.OnFinger0;
            @Finger0.canceled += instance.OnFinger0;
            @Finger1.started += instance.OnFinger1;
            @Finger1.performed += instance.OnFinger1;
            @Finger1.canceled += instance.OnFinger1;
        }

        private void UnregisterCallbacks(IRotateActions instance)
        {
            @Finger0.started -= instance.OnFinger0;
            @Finger0.performed -= instance.OnFinger0;
            @Finger0.canceled -= instance.OnFinger0;
            @Finger1.started -= instance.OnFinger1;
            @Finger1.performed -= instance.OnFinger1;
            @Finger1.canceled -= instance.OnFinger1;
        }

        public void RemoveCallbacks(IRotateActions instance)
        {
            if (m_Wrapper.m_RotateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotateActions instance)
        {
            foreach (var item in m_Wrapper.m_RotateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotateActions @Rotate => new RotateActions(this);
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface IRotateActions
    {
        void OnFinger0(InputAction.CallbackContext context);
        void OnFinger1(InputAction.CallbackContext context);
    }
}
