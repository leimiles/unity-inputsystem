//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/MySamples/RotateAround/InputSystem/RotateAround.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RotateAround: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RotateAround()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RotateAround"",
    ""maps"": [
        {
            ""name"": ""Rotate"",
            ""id"": ""13611451-b5e1-425f-8262-8cd61f7d88a5"",
            ""actions"": [
                {
                    ""name"": ""ClickOnTarget"",
                    ""type"": ""Value"",
                    ""id"": ""0ea892f7-f1d4-49f7-b6a6-f49b9eb9349b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraLookAround"",
                    ""type"": ""Value"",
                    ""id"": ""c1d7617b-c99e-45de-9365-f2ab387dc9af"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""OneTouch"",
                    ""id"": ""9e75a012-4c4b-4bfc-ad78-a89c7821b010"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickOnTarget"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""344e2063-a6ca-48b7-ac46-c539e335c686"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickOnTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""dcaaef64-bb0a-4afc-8fec-3905a1981b20"",
                    ""path"": ""<Touchscreen>/primaryTouch/startPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickOnTarget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""42ebdb3c-13e8-4d20-8a97-d5d86eb38448"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraLookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Rotate
        m_Rotate = asset.FindActionMap("Rotate", throwIfNotFound: true);
        m_Rotate_ClickOnTarget = m_Rotate.FindAction("ClickOnTarget", throwIfNotFound: true);
        m_Rotate_CameraLookAround = m_Rotate.FindAction("CameraLookAround", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Rotate
    private readonly InputActionMap m_Rotate;
    private List<IRotateActions> m_RotateActionsCallbackInterfaces = new List<IRotateActions>();
    private readonly InputAction m_Rotate_ClickOnTarget;
    private readonly InputAction m_Rotate_CameraLookAround;
    public struct RotateActions
    {
        private @RotateAround m_Wrapper;
        public RotateActions(@RotateAround wrapper) { m_Wrapper = wrapper; }
        public InputAction @ClickOnTarget => m_Wrapper.m_Rotate_ClickOnTarget;
        public InputAction @CameraLookAround => m_Wrapper.m_Rotate_CameraLookAround;
        public InputActionMap Get() { return m_Wrapper.m_Rotate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotateActions set) { return set.Get(); }
        public void AddCallbacks(IRotateActions instance)
        {
            if (instance == null || m_Wrapper.m_RotateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RotateActionsCallbackInterfaces.Add(instance);
            @ClickOnTarget.started += instance.OnClickOnTarget;
            @ClickOnTarget.performed += instance.OnClickOnTarget;
            @ClickOnTarget.canceled += instance.OnClickOnTarget;
            @CameraLookAround.started += instance.OnCameraLookAround;
            @CameraLookAround.performed += instance.OnCameraLookAround;
            @CameraLookAround.canceled += instance.OnCameraLookAround;
        }

        private void UnregisterCallbacks(IRotateActions instance)
        {
            @ClickOnTarget.started -= instance.OnClickOnTarget;
            @ClickOnTarget.performed -= instance.OnClickOnTarget;
            @ClickOnTarget.canceled -= instance.OnClickOnTarget;
            @CameraLookAround.started -= instance.OnCameraLookAround;
            @CameraLookAround.performed -= instance.OnCameraLookAround;
            @CameraLookAround.canceled -= instance.OnCameraLookAround;
        }

        public void RemoveCallbacks(IRotateActions instance)
        {
            if (m_Wrapper.m_RotateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRotateActions instance)
        {
            foreach (var item in m_Wrapper.m_RotateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RotateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RotateActions @Rotate => new RotateActions(this);
    public interface IRotateActions
    {
        void OnClickOnTarget(InputAction.CallbackContext context);
        void OnCameraLookAround(InputAction.CallbackContext context);
    }
}
